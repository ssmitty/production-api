version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ticker-api-db
    restart: unless-stopped
    environment:
      # PostgreSQL configuration from environment variables
      - POSTGRES_DB=${POSTGRES_DB:-ticker_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ticker_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env.secrets

  # FastAPI Application
  api:
    build: .
    container_name: ticker-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database configuration from environment variables
      - DATABASE_URL=${DATABASE_URL}
      # API Keys from environment variables  
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Server configuration
      - PORT=8000
      - HOST=0.0.0.0
      - DEBUG=${DEBUG:-false}
    env_file:
      - .env.secrets
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Only mount source code in development
      - ./src:/app/src:ro
      - ./logs:/app/logs
    networks:
      - ticker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/detailed"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache (Optional - for future caching)
  redis:
    image: redis:7-alpine
    container_name: ticker-api-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticker-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  ticker-network:
    driver: bridge 